import pandas as pd
import numpy as np
import xgboost as xgb
import lightgbm as lgb
from sklearn import metrics
from sklearn.metrics import accuracy_score
from sklearn.feature_extraction import text
from sklearn.metrics import classification_report
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.feature_extraction.text import TfidfVectorizer

df_train = pd.read_csv(r'C:\Users\user\Documents\WIA1007\train_data.csv', ",", encoding='utf-8', header=0)
df_test = pd.read_csv(r'C:\Users\user\Documents\WIA1007\test_data.csv', ",", encoding='utf-8', header=0)
x_train = df_train['text']
y_train = df_train['category'].tolist()
x_test = df_test['text']
y_test = df_test['category'].tolist()
vectorizer = TfidfVectorizer(
    norm='l2',
    max_features=1800
)
X_train = vectorizer.fit_transform(x_train).toarray()
X_test = vectorizer.fit_transform(x_test).toarray()
XGB_Classifier = xgb.XGBClassifier(learning_rate=0.5,
                                   n_estimators=100,
                                   max_depth=6,
                                   gamma=5,
                                   objective='binary:logistic',
                                   random_state=99
                                   )
XGB_Classifier = XGB_Classifier.fit(X_train, y_train)
Xgb_pred = XGB_Classifier.predict(X_test).astype(int)
Xgb_accuracy = accuracy_score(y_test, Xgb_pred)
Xgb_precision = metrics.precision_score(y_test, Xgb_pred)
Xgb_recall = metrics.recall_score(y_test, Xgb_pred)
Xgb_F_measure = metrics.f1_score(y_test, Xgb_pred)

print("Accuracy: %f" % Xgb_accuracy)
print("Precision: %f" % Xgb_precision)
print("Recall: %f" % Xgb_recall)
print("F_measure: %f" % Xgb_F_measure)
XGBC_report = classification_report(y_test, Xgb_pred)
print(XGBC_report)
